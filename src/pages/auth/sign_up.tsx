import { type NextPage } from "next";
import Head from "next/head";
import "twin.macro";
import { api } from "~/utils/api";
import { Card, Chips, Layout } from "~/components";
import { useForm, type SubmitHandler } from "react-hook-form";
import { useRouter } from "next/router";
import { getCsrfToken } from "next-auth/react";
import type { GetServerSidePropsContext } from "next";
import { prisma } from "~/server/db";

type Inputs = {
  username: string;
  password: string;
  csrfToken: string;
};

const SignUp: NextPage<{ csrfToken: string }> = ({ csrfToken }) => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();
  const { mutate: addMutate } = api.user.add.useMutation();
  const route = useRouter();

  const onSubmit: SubmitHandler<Inputs> = (data) => {
    addMutate({
      username: data.username,
      password: data.password,
      csrfToken: data.csrfToken,
    });
    route.push("/");
    console.log(data);
  };

  return (
    <>
      <Head>
        <title>reigter user</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div tw="mt-52">
          <form onSubmit={handleSubmit(onSubmit)}>
            <input
              type="hidden"
              defaultValue={csrfToken}
              {...register("csrfToken")}
            />
            <label>
              Username
              <input type="text" {...register("username")} tw="bg-amber-400" />
            </label>
            <label>
              Password
              <input {...register("password")} tw="bg-amber-400" />
            </label>
            <button type="submit">sign up</button>
          </form>
        </div>
      </Layout>
    </>
  );
};

export default SignUp;

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const userCount = await prisma.user.count();
  if (userCount === 1) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {
      csrfToken: await getCsrfToken(context),
    },
  };
}
