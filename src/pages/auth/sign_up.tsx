import { type NextPage } from "next";
import Head from "next/head";
import "twin.macro";
import { api } from "~/utils/api";
import { Button, Icon, Input, Layout, useSnackbar } from "~/components";
import { useForm, type SubmitHandler } from "react-hook-form";
import { useRouter } from "next/router";
import { prisma } from "~/server/db";
import { type RegisterForm } from "types/login-input.types";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const schema = z
  .object({
    username: z
      .string()
      .min(3, {
        message: "至少3个字符",
      })
      .max(20, {
        message: "不能超过20个字符",
      }),
    password: z
      .string()
      .min(6, {
        message: "至少6个字符",
      })
      .max(20, {
        message: "不能超过20个字符",
      }),
    "confirm-password": z
      .string()
      .min(6, {
        message: "至少6个字符",
      })
      .max(20, {
        message: "不能超过20个字符",
      }),
  })
  .required() //检查密码是否一致
  .refine((data) => data.password === data["confirm-password"], {
    message: "两次密码不一致",
    path: ["confirm-password"],
  });

const SignUp: NextPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<RegisterForm>({
    resolver: zodResolver(schema),
  });

  const { open } = useSnackbar();
  const { mutate: addMutate } = api.user.add.useMutation({
    onError: (error) => {
      open && open(error.message);
    },
    onSuccess: () => {
      route.push("/");
    },
  });
  const route = useRouter();

  const onSubmit: SubmitHandler<RegisterForm> = async (data) => {
    addMutate({
      username: data.username,
      password: data.password,
    });
    //
  };

  return (
    <>
      <Head>
        <title>注册您的账户</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout hiddenTopFooter={true}>
        <div tw="mt-52 container mx-auto px-4 md:w-96">
          <div tw=" mb-4 ">
            <h1 tw="headline-large text-center text-on-surface ">
              为您的博客，注册账户
            </h1>
          </div>
          <form onSubmit={handleSubmit(onSubmit)}>
            <Input
              autoComplete="username"
              trailingIcon={<Icon name="account_circle"></Icon>}
              placeholder="用户名"
              errors={errors}
              {...register("username")}
            ></Input>
            <Input
              type="password"
              autoComplete="new-password"
              trailingIcon={<Icon name="password"></Icon>}
              {...register("password")}
              placeholder="密码"
              errors={errors}
            ></Input>
            <Input
              type="password"
              autoComplete="new-password"
              trailingIcon={<Icon name="password"></Icon>}
              {...register("confirm-password")}
              placeholder="确认密码"
              errors={errors}
            ></Input>
            <div tw="flex flex-col md:flex-row justify-center space-y-2 md:(space-x-2 space-y-0)">
              <Button nativeType="submit" type="filled" tw="w-full">
                注册
              </Button>
            </div>
          </form>
        </div>
      </Layout>
    </>
  );
};

export default SignUp;

export async function getServerSideProps() {
  const userCount = await prisma.user.count();
  if (userCount === 1) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: {},
  };
}
