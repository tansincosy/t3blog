import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import "twin.macro";
import { api } from "~/utils/api";
import { Card, Chips, Layout } from "~/components";

const Home: NextPage = () => {
  const homeResult = api.home.get.useQuery();
  const posts = api.post.post20Latest.useQuery();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        {homeResult.data ? (
          <div tw="overflow-hidden w-full h-80 md:h-96 lg:h-[34rem] relative mt-16 container mx-auto">
            <div
              tw="h-full w-full bg-cover bg-center rounded-3xl bg-no-repeat"
              style={{
                backgroundImage: `url(${homeResult.data.cover})`,
              }}
            ></div>
            <div tw="absolute top-0 z-10 flex h-full w-full flex-col items-center justify-center ">
              <h1 tw="display-small text-inverse-primary md:display-large">
                {homeResult.data.name}
              </h1>
              <h4 tw="title-large mt-2 text-inverse-primary md:headline-medium">
                {homeResult.data.description}
              </h4>
            </div>
          </div>
        ) : (
          []
        )}
        <main tw="container mx-auto items-stretch mt-8">
          <div tw="display-small md:display-medium lg:display-large text-on-surface">
            最新博客
          </div>
          <div tw="grid grid-cols-1 md:(grid-cols-2) gap-2 xl:(grid-cols-3 gap-4) 2xl:(grid-cols-4 gap-4)">
            {Array.isArray(posts.data)
              ? posts.data.map((post) => {
                  return (
                    <Card
                      key={post.id}
                      type="filled"
                      tw="z-10 m-4 flex shrink cursor-pointer flex-col overflow-hidden w-auto basis-80 pb-5"
                    >
                      <div title="sample1" onClick={() => {}}>
                        <div tw="overflow-hidden rounded-xl h-48 w-full bg-no-repeat">
                          <div
                            style={{
                              backgroundImage: `url(${post.cover})`,
                            }}
                            tw="h-full w-full bg-cover bg-center bg-no-repeat"
                          ></div>
                        </div>
                        <div tw="box-border flex flex-col justify-center px-6">
                          <h1 tw="text-on-surface text-[3rem] mt-5">
                            {post.title}
                          </h1>
                          <h2 tw="title-large text-secondary md:mt-2">
                            {post.description}
                          </h2>
                          <div tw="md:mt-2">
                            {["tag1", "tah2"].map((tag) => {
                              return (
                                <Chips
                                  onClick={(event) => {
                                    event.stopPropagation();
                                  }}
                                  tw="z-10 m-1"
                                  icon="tag"
                                  key="222"
                                  type="suggestion"
                                >
                                  {tag}
                                </Chips>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    </Card>
                  );
                })
              : []}
          </div>
        </main>
      </Layout>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div tw="flex flex-col items-center justify-center gap-4">
      <p tw="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        tw="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
